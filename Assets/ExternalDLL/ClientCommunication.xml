<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClientCommunication</name>
    </assembly>
    <members>
        <member name="M:ClientCommunication.Init(System.String,System.String)">
            <summary>
            Inicializa la ip y el puerto con el que se va a conectar el cliente
            </summary>
            <param name="IP_"> IP de conexión </param>
            <param name="PORT_"> puerto de conexión </param>
        </member>
        <member name="M:ClientCommunication.LogIn(System.String,System.String,System.String)">
            <summary>
            Inicia la sesión de un usuario en el servidor de matchmaking
            </summary>
            <param name="password"> contraseña (a poder ser encriptada) del usuario con el que se registró </param>
            <param name="username"> nombre del usuario con el que se registró </param>
            <param name="version"> versión en la que se encuentra el sistema. 1.0.0 por defecto </param>
            <returns> Devuelve un ServerMessage con posibilidad de casteo a Login. Casteo a REST_Error si el 
            código devuelto es distinto de 200 </returns>
        </member>
        <member name="M:ClientCommunication.LogOut">
            <summary>
            Desconecta al usuario del servidor de matchmaking
            </summary>
            <returns> Devuelve un ServerMessage con casteo posible a REST_Error si el código es distinto a 200 </returns>
        </member>
        <member name="M:ClientCommunication.SignIn(System.String,System.String,System.String)">
            <summary>
            Registra a un usuario en el servidor de matchmaking
            </summary>
            <param name="password"> Contraseña del usuario (a ser posible encriptada)</param>
            <param name="username"> Nick con el que se registra el usuario. Solo un usuario por nick</param>
            <param name="email"> Email de registro del usuario. Solo un usuario por email</param>
            <returns>Devuelve un ServerMessage con casteo posible a REST_Error si el código es distinto a 200 </returns>
        </member>
        <member name="M:ClientCommunication.GetAvailable(System.String,System.String)">
            <summary>
            Comprueba si el nick o el email no han sido utilizados ya
            </summary>
            <param name="nick"> Nick a comprobar </param>
            <param name="email"> Email a comprobar </param>
            <returns> Devuelve un ServerMessage con casteo posible a Available. Si el código es distinto a 200 es posible un casteo a REST_Error </returns>
        </member>
        <member name="M:ClientCommunication.SendRoundInfo(GameData)">
            <summary>
            Envío de datos necesarios para el servidor de amtchmaking
            </summary>
            <param name="gameData"> Clase con los datos necesarios </param>
            <returns> Devuelve un ServerMessage con casteo posible a REST_Error si el código es distinto a 200 </returns>
        </member>
        <member name="M:ClientCommunication.AddToQueue">
            <summary>
            Añade al usuario a la cola de matchmaking para inciar la busqueda
            </summary>
            <returns> Devuelve un ServerMessage con casteo posible a REST_Error si el código es distinto a 200 </returns>
        </member>
        <member name="M:ClientCommunication.SearchPair(System.Single)">
            <summary>
            Busqueda del rival para una partida mas nivelada posible
            </summary>
            <param name="waitTime"> Tiempo que lleva el usuario buscando contrincante </param>
            <returns> Devuelve un ServerMessage con casteo posible a PairSearch. Si el código es distinto a 200 es posible un casteo a REST_Error  </returns>
        </member>
        <member name="M:ClientCommunication.LeaveQueue">
            <summary>
            Saca al usuario de la cola de busqueda
            </summary>
            <returns> Devuelve un ServerMessage con casteo posible a REST_Error si el código es distinto a 200 </returns>
        </member>
        <member name="M:ClientCommunication.Refresh">
            <summary>
            Genera un nuevo accessToken
            </summary>
            <returns> Devuelve un ServerMessage con casteo posible a RefreshMessage. Si el código es distinto a 200 es posible un casteo a REST_Error </returns>
        </member>
        <member name="M:ClientCommunication.FindServerInfo(System.Int32,System.Int32)">
            <summary>
            Busca un servidor de juego al que conectarse
            </summary>
            <param name="id1"> ID del usuario </param>
            <param name="id2"> ID del rival </param>
            <returns> Devuelve un ServerMessage con casteo posible a ServerMatchInfo. Si el código es distinto a 200 es posible un casteo a REST_Error </returns>
        </member>
        <member name="M:ClientCommunication.FinishMatch(System.Int32,System.Int32)">
            <summary>
            Finaliza el servidor al que estaba conectado el usuario
            </summary>
            <param name="id1"> ID del usuario </param>
            <param name="id2"> ID del rival </param>
            <returns> Devuelve un ServerMessage con casteo posible a REST_Error si el código es distinto a 200 </returns>
        </member>
        <member name="M:ClientCommunication.GetInfo(System.Int32)">
            <summary>
            Obtiene la información del usuario
            </summary>
            <param name="id"> ID del usuario </param>
            <returns> Devuelve un ServerMessage con casteo posible a UserDataSmall. Si el código es distinto a 200 es posible un casteo a REST_Error  </returns>
        </member>
        <member name="M:ClientCommunication.HandleRequest(System.Net.HttpWebRequest,System.Int32@)">
            <summary>
            Maneja la conexión con el servidor
            </summary>
            <param name="request"> Tipo de request </param>
            <param name="code"> Código de salida </param>
            <returns> Devuelve el string recivido por el servidor de matchmaking. Esta en formato JSON </returns>
        </member>
        <member name="M:ClientCommunication.Post(System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Envio de tipo POST
            </summary>
            <param name="json"> JSON que se va a enviar </param>
            <param name="url"> Url al que se le va a enviar </param>
            <param name="code"> Código de respuesta </param>
            <param name="useAuth"> Añade el header de autenticación </param>
            <returns> Devuelve el string enviado desde el servidor de matchmaking </returns>
        </member>
        <member name="M:ClientCommunication.Get(System.String,System.Int32@,System.Boolean)">
            <summary>
            Envio de tipo GET
            </summary>
            <param name="url"> Url al que se le va a enviar </param>
            <param name="code"> Código de respuesta </param>
            <param name="useAuth"> Añade el header de autenticación </param>
            <returns> Devuelve el string enviado desde el servidor de matchmaking </returns>
        </member>
        <member name="M:ClientCommunication.Delete(System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Envio de tipo DELETE
            </summary>
            <param name="json"> JSON que se va a enviar </param>
            <param name="url"> Url al que se le va a enviar </param>
            <param name="code"> Código de respuesta </param>
            <param name="useAuth"> Añade el header de autenticación </param>
            <returns> Devuelve el string enviado desde el servidor de matchmaking </returns>
        </member>
    </members>
</doc>
